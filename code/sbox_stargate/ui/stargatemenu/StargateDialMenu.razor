@using System.Collections.Generic;
@using System.Linq;
@using Sandbox;
@using Sandbox.Html;
@using Sandbox.UI;
@using Sandbox.UI.Tests;
@using static Stargate;

<style>
    .checkbox {
        cursor: pointer;
        color: rgba( white, 0.6 );
        align-items: center;
        label {
            pointer-events: none;
        }

    > .checkmark {
        padding: 1px;
        font-size: 22px;
        border: 3px solid white;
        border-radius: 4px;
        text-align: center;
        justify-content: center;
        align-items: center;
        color: transparent;
        width: 24px;
        height: 24px;
        margin-right: 10px;
        pointer-events: none;
        background-color: gray;
    }

    &.checked {
        > .checkmark

    {
        color: transparent;
        background-color: lawngreen;
    }

    }

    &:active {
        transform: scale( 0.9 );
        transform-origin: 20px 50%;
        color: red;
    }

    &:hover {
        color: lawngreen;
    }

    }


    .stargate-font {
        &.sg1 {
            font-family: sbox_stargate/stargate_sg1_edit;
            font-size: 19px;
        }

        &.sga {
            font-family: sbox_stargate/stargate_atlantis;
            font-size: 23px;
        }

        &.sgu {
            font-family: sbox_stargate/stargate_universe;
            font-size: 60px;
        }
    }

    stargatemenuv2 {
        width: 800px;
        height: 450px;
        background-color: rgba(0, 0, 0, 0.95);
        position: absolute;
        top: 10%;
        left: 10%;
        pointer-events: all;
        display: flex;
        flex-direction: row;

    .panel-title {
        color: white;
        margin-top: 5px;
    }

    .input {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-bottom: 10px;
        label .input-label

    {
        color: lightgray;
    }

    textentry {
        background-color: white;
        height: 20px;
        color: black;
        align-items: center;
        text-align: center;
        font-weight: bold;
        cursor: text;
    }

    select {
        background-color: white;
        height: 20px;
        width: 100px;
        color: black;
        cursor: pointer;

        &.open {
            background-color: lightgray;
            color: black;
        }

    }

    icon {
        color: white;
        font-family: MaterialIcons;
        font-size: 20px;
        display: flex;
        align-items: center;
        justify-content: center;

        &.red {
            color: darkred;
        }

        &.green {
            color: green;
        }

        &.can-click {
            cursor: pointer;

            &.active {
                transform: scale(1.0);
            }

        }
    }

    &.inline {
        flex-direction: row;
        textentry

    {
        width: 100px;
    }

    }
    }

    .options {
        height: 100%;
        width: 25%;
        margin-right: 2.5%;
        display: flex;
        flex-direction: column;
        padding: 5px;
        .panel-title

    {
        margin-bottom: 10px;
    }

    }

    .dialing {
        height: 100%;
        width: auto;
        display: flex;
        flex-direction: column;
        padding: 5px;

    .panel-title {
        margin-bottom: 20px;
    }

    .dial {
        margin-left: auto;

        checkbox {
            margin-left: 5px;
        }
    }

    .gatelist {
        height: 100%;
        width: 100%;
    }

    .table-head {
        // position: sticky;
        top: 0;
        width: 100%;
        height: 30px;
        background-color: lightgray;
        display: flex;
        flex-direction: row;
        border-bottom: 1px solid black;

        .head-column {
            background-color: yellow;
            color: blue;
            width: 180px;
            height: 27px;
            justify-content: center;
            align-items: center;
            font-weight: 800;
            border-right: 1px solid black;
            cursor: pointer;

            &:last-child {
                border: 0;
            }

            &:hover {
                background-color: darkgray;
            }

        }
    }

    .table {
        width: 100%;
        height: 100%;
        background-color: lightgray;
        display: flex;
        flex-direction: column;



        .table-rows {
            width: 100%;
            height: 100%;
            overflow: scroll;

            .row {
                border-bottom: 1px solid black;
                width: 100%;
                height: 40px;
                display: flex;
                flex-direction: row;
                flex-grow: 1;
                cursor: pointer;
                font-size: 16px;

                .td {
                    width: 180.3px;
                    height: 100%;
                    border-right: 1px solid black;
                    align-items: center;
                    justify-content: center;
                    text-align: center;

                    &:last-child {
                        border-right: 0;
                    }

                }

                &:hover {
                    background-color: rgba(0, 0, 0, 0.1);
                }

            }
        }
        }
    }
    }
</style>

<root>
    @if (!DHD.IsValid())
    {
        <div class="options">
            <text class="panel-title">Gate Settings</text>

            <div class="input inline">
                <label class="input-label">Address:</label>
                <TextEntry Value:bind=@GateAddress style="text-transform: uppercase;"></TextEntry>
            </div>

            <div class="input inline">
                <label class="input-label">Group:</label>
                <TextEntry Value:bind=@GateGroup style="text-transform: uppercase;"></TextEntry>
            </div>

            <div class="input inline">
                <label class="input-label">Name:</label>
                <TextEntry Value:bind=@GateName></TextEntry>
            </div>

            <div class="input inline">
                <Checkbox Value:bind=@IsPrivate>Private</Checkbox>
            </div>

            <div class="input inline">
                <Checkbox Value:bind=@IsLocal>Local</Checkbox>
            </div>

            <div class="input inline">
                <Checkbox Value:bind=@AutoClose>Auto Close</Checkbox>
            </div>

            <div class="input inline">
                <Checkbox Value:bind=@WormholeCinematic>Wormhole</Checkbox>
            </div>
        </div>  
    }

    <div class="dialing">
        <text class="panel-title">Dialing</text>

        <div class="controls">
            <div class="input inline">
                <label class="input-label">Search:</label>
                <TextEntry Value:bind=@SearchFilter></TextEntry>
                <!--<icon class="can-click green" onclick="FillGates()">autorenew</icon>-->
            </div>

            <div class="input inline dial">
                <label class="input-label">Address:</label>
                <TextEntry Value:bind=@DialAddress></TextEntry>
                <Checkbox Value:bind=@FastDial tooltip="Enable Fast Dial"></Checkbox>
                <icon class="can-click green" tooltip="Dial" onclick=@OpenGate>phone</icon>
                <icon class="can-click red" tooltip="Abort/Close" onclick=@CloseGate>cancel</icon>
            </div>
        </div>

        <div class="gatelist">

            <table @ref=table>
                <tablehead class="table-head">Glyphs,Address,Name</tablehead>
            </table>
        </div>
    </div>
</root>


@code
{
    private Stargate Gate;
    private Dhd DHD;

    private string _gateAddress = "";
    public string GateAddress
    {
        get
        {
            return _gateAddress;
        }
        set
        {
            if (_gateAddress == value)
                return;
            _gateAddress = value;
            if (_gateAddress.Length == 6)
                Stargate.RequestAddressChange(Gate.NetworkIdent, _gateAddress);
        }
    }

    private string _gateName = "";
    public string GateName
    {
        get
        {
            return _gateName;
        }
        set
        {
            if (_gateName == value)
                return;
            _gateName = value;
            Stargate.RequestNameChange(Gate.NetworkIdent, _gateName);
        }
    }

    private string _gateGroup = "";
    public string GateGroup
    {
        get
        {
            return _gateGroup;
        }
        set
        {
            if (_gateGroup == value)
                return;
            _gateGroup = value;
            Stargate.RequestGroupChange(Gate.NetworkIdent, _gateGroup);
        }
    }

    private bool _isPrivate = false;
    public bool IsPrivate
    {
        get
        {
            return _isPrivate;
        }
        set
        {
            if (_isPrivate == value)
                return;

            _isPrivate = value;
            Stargate.SetGatePrivate(Gate.NetworkIdent, _isPrivate);
        }
    }

    private bool _isLocal = false;
    public bool IsLocal
    {
        get
        {
            return _isLocal;
        }
        set
        {
            if (_isLocal == value)
                return;

            _isLocal = value;

            Stargate.SetGateLocal(Gate.NetworkIdent, _isLocal);
        }
    }

    private bool _autoClose = false;
    public bool AutoClose
    {
        get
        {
            return _autoClose;
        }
        set
        {
            if (_autoClose == value)
                return;

            _autoClose = value;

            Stargate.SetAutoClose(Gate.NetworkIdent, _autoClose);
        }
    }

    private bool _wormholeCinematic = true;
    public bool WormholeCinematic
    {
        get
        {
            return _wormholeCinematic;
        }
        set
        {
            if (_wormholeCinematic == value)
                return;

            _wormholeCinematic = value;

            Stargate.ToggleWormhole(Gate.NetworkIdent, _wormholeCinematic);
        }
    }

    public bool FastDial { get; set; } = true;

    public string DialAddress { get; set; }

    private string _searchFilter = "";
    public string SearchFilter
    {
        get => _searchFilter;
        set
        {
            if (_searchFilter == value)
                return;

            _searchFilter = value;

            //FillGates();
        }
    }

    public void SetGate(Stargate gate)
    {
        Gate = gate;
        RefreshGateInformation();
    }

    public void SetDHD(Dhd dhd)
    {
        DHD = dhd;
        RefreshGateInformation();
    }

    public void OpenGate()
    {
        Stargate.RequestDial(FastDial ? DialType.FAST : DialType.SLOW, DialAddress, Gate.NetworkIdent);
    }

    public void CloseGate()
    {
        Stargate.RequestClose(Gate.NetworkIdent);
    }

    [Event("stargate.refreshgateinformation")]
    private void RefreshGateInformation()
    {
        GateAddress = Gate.GateAddress;
        GateName = Gate.GateName;
        GateGroup = Gate.GateGroup;
        AutoClose = Gate.AutoClose;
        IsPrivate = Gate.GatePrivate;
        IsLocal = Gate.GateLocal;
        WormholeCinematic = Gate.ShowWormholeCinematic;

        PopulateGateList();
    }

    public string GetGlyphsFontForGate(Stargate gate)
    {
        var glyphs = gate.GateGlyphType;
        var name = "concept";

        if (glyphs == GlyphType.MILKYWAY) name = "sg1";
        else if (glyphs == GlyphType.PEGASUS) name = "sga";
        else if (glyphs == GlyphType.UNIVERSE) name = "sgu";

        return $"stargate-font {name}";
    }

    private Table table { get; set; }

    private void PopulateGateList()
    {
        if (!table.IsValid())
            return;

        table.Rows.Clear();
        table.Rows.Layout.Columns = 1;
        //table.Rows.Layout.ItemSize = new Vector2( -1, 40 );
        table.Rows.Layout.ItemWidth = -1;
        table.Rows.Layout.ItemHeight = 40;
        table.Rows.OnCreateCell = (cell, data) =>
        {
            var gate = (Stargate)data;
            var panel = cell.Add.Panel("row");
            panel.AllowChildSelection = true;

            var address = GetOtherGateAddressForMenu(Gate, gate);
            var glyphAddress = address;
            //if ( Gate.GateGlyphType == GlyphType.MILKYWAY && Gate.EarthPointOfOrigin ) glyphAddress = glyphAddress.Replace( '#', '?' ); // custom POO removed for now
            if (Gate.GateGlyphType == GlyphType.MILKYWAY) glyphAddress = glyphAddress.Replace('#', '?');

            var td = panel.Add.Panel($"td {GetGlyphsFontForGate(Gate)}");
            td.AddChild<Label>().Text = glyphAddress;

            td = panel.Add.Panel("td");
            td.AddChild<Label>().Text = address;

            td = panel.Add.Panel("td");
            td.AddChild<Label>().Text = gate.GateName;

            panel.AddEventListener("onclick", () =>
            {
                DialAddress = address;
            });

            panel.AddEventListener("ondoubleclick", () =>
            {
                DialAddress = address;
                OpenGate();
            });
        };

        // list gates that arent private
        List<Stargate> gates = Entity.All.OfType<Stargate>().Where(x => x.GateAddress != Gate.GateAddress && !x.GatePrivate).ToList();

        if (SearchFilter != null && SearchFilter != "")
        {
            gates = gates.Where(x => x.GateAddress.Contains(SearchFilter) || (x.GateName != null && x.GateName != "" && x.GateName.Contains(SearchFilter))).ToList();
        }

        foreach (Stargate gate in gates)
        {
            if (Gate.GateLocal && Gate.GateGroup != gate.GateGroup) continue;

            // only show other gate if both gates have same group, or a different group but both are not local
            if ((Gate.GateGroup == gate.GateGroup) || (Gate.GateGroup != gate.GateGroup && !Gate.GateLocal && !gate.GateLocal))
            {
                table.Rows.AddItem(gate);
            }
        }
    }

    protected override void OnAfterTreeRender(bool firstTime) {
        if (firstTime) PopulateGateList();
    }

    //protected override int BuildHash()
    //{
    //    return HashCode.Combine(Gate.);
    //}
}

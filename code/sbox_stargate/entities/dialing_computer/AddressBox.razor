@using System;
@using Sandbox;
@using Sandbox.UI;

<style>

	.frame {
		width: 100%;
		height: 100%;
		display: flex;
		flex-direction: column;
		align-items: flex-end;
		justify-content: space-between;
		row-gap: 2%;
	}

	.box_base {
		flex-grow: 1;
		width: 100%;
	}

	.box_base:nth-child(8) {
		transition: all 1s;

		&.hidden {
			flex-grow: 0;
			opacity: 0;
			transition: all 0.2s;
		}
	}

	.box_base:nth-child(9) {
		transition: all 1s;

		&.hidden {
			flex-grow: 0;
			opacity: 0;
			transition: all 0.2s;
		}
	}

	.box_number {
		position: absolute;
		color: white;
		font-size: 100%;
		align-self: center;
		left: 5%;
		bottom: 0;
		opacity: 1;

		&.num8 {
			transition: opacity 0.5s;

			&.hidden
			{
				opacity: 0;
				transition: opacity 0.2s;
			}
		}

		&.num9 {
			transition: opacity 0.5s;

			&.hidden
			{
				opacity: 0;
				transition: opacity 0.2s;
			}
		}
	}

	.box_glyph_container {
		position: absolute;
		background-color: rgba(green, 0.1);
		border-width: 2%;
		border-color: @DialingComputer.Color_SG_Blue.Rgb;
		height: 100%;
		width: 75%;
		right: 0;
	}

</style>

<div class="frame">

	@{
		var s = $"font-size: {150 * TextScaleModifier}%";
		for (int i = 1; i <= 7; i++)
		{
			<div class="box_base hidden">

				<label class="box_number" style=@s text=@i></label>
				<div class="box_glyph_container"></div>

			</div>
		}

		<div class="box_base hidden" @ref="box8">

			<label class="box_number num8 hidden" style=@s text=8 @ref="box8_number"></label>
			<div class="box_glyph_container"></div>

		</div>

		<div class="box_base hidden" @ref="box9">

			<label class="box_number num9 hidden" style=@s text=9 @ref="box9_number"></label>
			<div class="box_glyph_container"></div>

		</div>
	}
	
</div>

@code {

	private float TextScaleModifier = 0;

	Panel box8 { get; set; } = null;
	Panel box8_number { get; set; } = null;

	Panel box9 { get; set; } = null;
	Panel box9_number { get; set; } = null;

	private async void AnimateBox89(bool enable, bool b9)
	{
		if (enable)
		{
			(b9 ? box9 : box8).SetClass("hidden", false);
			await GameTask.DelaySeconds(1);
			(b9 ? box9_number : box8_number).SetClass("hidden", false);
		}
		else
		{
			(b9 ? box9_number : box8_number).SetClass("hidden", true);
			await GameTask.DelaySeconds(0.25f);
			(b9 ? box9 : box8).SetClass("hidden", true);
		}
	}

	public void Box8_Appear()
	{
		AnimateBox89(true, false);
	}

	public void Box8_Disappear()
	{
		AnimateBox89(false, false);
	}

	public void Box9_Appear()
	{
		AnimateBox89(true, true);
	}

	public void Box9_Disappear()
	{
		AnimateBox89(false, true);
	}

	protected override void OnAfterTreeRender(bool firstTime)
	{
		float h = (this as Panel).Box.Rect.Height;
		TextScaleModifier = h / 2048.0f;
	}

	protected override int BuildHash()
	{
		return HashCode.Combine(Time.Now);
	}

}
